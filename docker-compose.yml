version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      auth-service:
        condition: service_healthy
      bike-service:
        condition: service_healthy
      rental-service:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:13
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  auth-service:
    build: ./auth_service
    ports:
      - "8001:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${AUTH_DB_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  bike-service:
    build: ./bike_service
    ports:
      - "8002:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${BIKE_DB_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  rental-service:
    build: ./rental_service
    ports:
      - "8003:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${RENTAL_DB_URL}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network